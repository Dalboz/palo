////////////////////////////////////////////////////////////////////////////////
/// @brief palo database
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox AG
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef OLAP_DATABASE_H
#define OLAP_DATABASE_H 1

#include "palo.h"

#include <set>

#include "Exceptions/ParameterException.h"

#include "Collections/AssociativeArray.h"
#include "Collections/StringUtils.h"

#include "InputOutput/JournalFileWriter.h"

#include "Olap/Cube.h"
#include "Olap/ConfigurationCube.h"
#include "Olap/Dimension.h"
#include "Olap/User.h"

namespace palo {
  class Server;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief OLAP database
  ///
  /// An OLAP database consists of dimensions and cubes
  ////////////////////////////////////////////////////////////////////////////////

  class SERVER_CLASS Database {
  private:
    static const string INVALID_CHARACTERS;

  private:
    struct Name2CubeDesc {
      uint32_t hash (const string& name) {
        return StringUtils::hashValueLower(name.c_str(), name.size());
      }

      bool isEmptyElement (Cube * const & cube) {
        return cube == 0;
      }

      uint32_t hashElement (Cube * const & cube) {
        return hash(cube->getName());
      }

      uint32_t hashKey (const string& key) {
        return hash(key);
      }

      bool isEqualElementElement (Cube * const & left, Cube * const & right) {
        return left->getName() == right->getName();
      }

      bool isEqualKeyElement (const string& key, Cube * const & cube) {
        const string& name = cube->getName();

        return key.size() == name.size() && strncasecmp(key.c_str(), name.c_str(), key.size()) == 0;
      }

      void clearElement (Cube * & cube) {
        cube = 0;
      }
    };

    struct Name2DimensionDesc {
      uint32_t hash (const string& name) {
        return StringUtils::hashValueLower(name.c_str(), name.size());
      }

      bool isEmptyElement (Dimension * const & dimension) {
        return dimension == 0;
      }

      uint32_t hashElement (Dimension * const & dimension) {
        return hash(dimension->getName());
      }

      uint32_t hashKey (const string& key) {
        return hash(key);
      }

      bool isEqualElementElement (Dimension * const & left, Dimension * const & right) {
        return left->getName() == right->getName();
      }

      bool isEqualKeyElement (const string& key, Dimension * const & dimension) {
        const string& name = dimension->getName();

        return key.size() == name.size() && strncasecmp(key.c_str(), name.c_str(), key.size()) == 0;
      }

      void clearElement (Dimension * & dimension) {
        dimension = 0;
      }
    };
   
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief Status of the database
    /// 
    /// UNLOADED: the database was not loaded<br>
    /// LOADED:   the database is loaded and not changed<br>
    /// CHANGED:  the database is new or changed<br>
    /// LOADING:  the database is loading
    ////////////////////////////////////////////////////////////////////////////////
  
    enum DatabaseStatus {
      UNLOADED,
      LOADED,
      CHANGED,
      LOADING
    };      

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates a new database from type line
    ////////////////////////////////////////////////////////////////////////////////

    static Database* loadDatabaseFromType (FileReader*, Server*, IdentifierType, const string& name, int type);

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates new database with given identifier
    ////////////////////////////////////////////////////////////////////////////////

    Database (IdentifierType databaseIdentifier, Server*, const string& name);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes database
    ////////////////////////////////////////////////////////////////////////////////

    virtual ~Database();
   
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name notification callbacks
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief called after a database is added to a server
    ////////////////////////////////////////////////////////////////////////////////
      
    virtual void notifyAddDatabase () {
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief called after a database is removed from a server
    ////////////////////////////////////////////////////////////////////////////////
      
    virtual void notifyRemoveDatabase () {
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief called after a database is renamed in a server
    ////////////////////////////////////////////////////////////////////////////////
      
    virtual void notifyRenameDatabase () {
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name functions to save and load the database
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns true if the database is loadable
    ////////////////////////////////////////////////////////////////////////////////

    virtual bool isLoadable ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief reads data from file
    ////////////////////////////////////////////////////////////////////////////////

    virtual void loadDatabase ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief saves data to file  
    ////////////////////////////////////////////////////////////////////////////////

    virtual void saveDatabase ();
      
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief saves data to file  
    ////////////////////////////////////////////////////////////////////////////////

    virtual void saveDatabaseType (FileWriter*) = 0;
      
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets database files
    ////////////////////////////////////////////////////////////////////////////////

    virtual void setDatabaseFile (const FileName&);
      
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes database and cubes
    ///
    /// This method deletes the database and cube files from disk.
    ////////////////////////////////////////////////////////////////////////////////

    virtual void deleteDatabaseFiles ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief unloads saved databases from memory
    ////////////////////////////////////////////////////////////////////////////////

    virtual void unloadDatabase ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name getter and setter
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns database type
    ////////////////////////////////////////////////////////////////////////////////

    virtual ItemType getType() = 0;
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief get status of database
    ////////////////////////////////////////////////////////////////////////////////

    void setStatus (DatabaseStatus status) {
      if (this->status != LOADING) {
        this->status = status;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief get status of database
    ////////////////////////////////////////////////////////////////////////////////

    DatabaseStatus getStatus () {
      return status;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets database identifier
    ////////////////////////////////////////////////////////////////////////////////

    const IdentifierType getIdentifier () const {
      return identifier;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets server
    ////////////////////////////////////////////////////////////////////////////////

    Server* getServer () const {
      return server;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief set or rename database
    ////////////////////////////////////////////////////////////////////////////////

    void setName (const string& name) {
      this->name = name;
      updateToken();
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief get database name
    ////////////////////////////////////////////////////////////////////////////////

    const string& getName () const {
      return name;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets deletable attribute
    ////////////////////////////////////////////////////////////////////////////////

    void setDeletable (bool deletable) {
      this->deletable = deletable;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets deletable attribute
    ////////////////////////////////////////////////////////////////////////////////

    bool isDeletable () const {
      return deletable;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets renamable attribute
    ////////////////////////////////////////////////////////////////////////////////

    void setRenamable (bool renamable) {
      this->renamable = renamable;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets renamable attribute
    ////////////////////////////////////////////////////////////////////////////////

    bool isRenamable () const {
      return renamable;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets extensible attribute
    ////////////////////////////////////////////////////////////////////////////////

    void setExtensible (bool extensible) {
      this->extensible = extensible;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets extensible attribute
    ////////////////////////////////////////////////////////////////////////////////

    bool isExtensible () const {
      return extensible;
    }
    

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets the token
    ////////////////////////////////////////////////////////////////////////////////

    uint32_t getToken () const {
      return token;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets journal
    ////////////////////////////////////////////////////////////////////////////////

    JournalFileWriter * getJournal () {
      return journal;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets number of dimensions
    ////////////////////////////////////////////////////////////////////////////////

    size_t sizeDimensions () const {
      return numDimensions;
    }
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief get list of dimensions
    ////////////////////////////////////////////////////////////////////////////////

    vector<Dimension*> getDimensions (User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets number of cubes
    ////////////////////////////////////////////////////////////////////////////////

    size_t sizeCubes () {
      return numCubes;
    };

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief get list of cubes
    ////////////////////////////////////////////////////////////////////////////////

    vector<Cube*> getCubes (User* user);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets client cache type
    ////////////////////////////////////////////////////////////////////////////////

    ConfigurationCube::ClientCacheType getClientCacheType () {      
      return cacheType;
    }
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets client cache type
    ////////////////////////////////////////////////////////////////////////////////

    void setClientCacheType (ConfigurationCube::ClientCacheType type) {
      Logger::info << "setting client cache type to " << type << endl;      
      cacheType = type;
    }

	////////////////////////////////////////////////////////////////////////////////
    /// @brief gets client hide elements
    ////////////////////////////////////////////////////////////////////////////////

    bool getHideElements() {      
      return hideElements;
    }


	////////////////////////////////////////////////////////////////////////////////
    /// @brief sets hide elements
    ////////////////////////////////////////////////////////////////////////////////

	void setHideElements(bool hide) {
      Logger::info << "setting hide elements to " << hide << endl;      
      hideElements = hide;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name functions to update internal structures
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief increments the token
    ////////////////////////////////////////////////////////////////////////////////

    void updateToken ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief opens journal
    ////////////////////////////////////////////////////////////////////////////////

    void openJournal () {
      closeJournal();
      journal = new JournalFileWriter(FileName(*fileName, "log"), false);
      journal->openFile();
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief closes journal
    ////////////////////////////////////////////////////////////////////////////////

    void closeJournal () {
      if (journal != 0) {
        delete journal;
        journal = 0;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name functions to administrate the dimensions
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns a new dimension identifier
    ////////////////////////////////////////////////////////////////////////////////

    IdentifierType fetchDimensionIdentifier ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds new dimension to database
    ////////////////////////////////////////////////////////////////////////////////

    void addDimension (Dimension*, bool notify);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief removes a dimension from database
    ////////////////////////////////////////////////////////////////////////////////

    void removeDimension (Dimension*, bool notify);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief renames a dimension
    ////////////////////////////////////////////////////////////////////////////////

    void renameDimension (Dimension*, const string&, bool notify);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds new dimension to database
    ////////////////////////////////////////////////////////////////////////////////

    Dimension* addDimension (const string& name, User* user, bool isInfo);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds dimension alias
    ////////////////////////////////////////////////////////////////////////////////

    Dimension* addAliasDimension (const string& name, Dimension* alias);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes dimension from database
    ////////////////////////////////////////////////////////////////////////////////

    void deleteDimension (Dimension* dimension, User* user);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief changes name of dimension
    ////////////////////////////////////////////////////////////////////////////////

    void renameDimension (Dimension* dimension, const string& name, User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief looks up dimension by identifier
    ////////////////////////////////////////////////////////////////////////////////

    Dimension* lookupDimension (IdentifierType identifier) {
      return identifier < dimensions.size() ? dimensions[identifier] : 0;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief looks up dimension by name
    ////////////////////////////////////////////////////////////////////////////////

    Dimension* lookupDimensionByName (const string& name) {
      return nameToDimension.findKey(name);
    }
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets dimension by identifier
    ///
    /// @throws ParameterException on dimension not found
    ////////////////////////////////////////////////////////////////////////////////

    Dimension* findDimension (IdentifierType identifier, User* user) {
      checkDimensionAccessRight(user, RIGHT_READ);
      
      Dimension* dimension = lookupDimension(identifier);
    
      if (dimension==0) {
        throw ParameterException(ErrorException::ERROR_DIMENSION_NOT_FOUND,
                                 "dimension not found",
                                 "dimension identifier", (int) identifier);
      }

      return dimension;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets dimension by name
    ///
    /// @throws ParameterException on dimension not found
    ////////////////////////////////////////////////////////////////////////////////

    Dimension* findDimensionByName (const string& name, User* user) {
      checkDimensionAccessRight(user, RIGHT_READ);

      Dimension* dimension = lookupDimensionByName(name);
    
      if (dimension==0) {
        throw ParameterException(ErrorException::ERROR_DIMENSION_NOT_FOUND,
                                 "dimension not found",
                                 "name", name);
      }

      return dimension;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name functions to administrate the cubes
    ////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief fetchs next free cube identifier
    ////////////////////////////////////////////////////////////////////////////////

    IdentifierType fetchCubeIdentifier ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds new cube to database
    ////////////////////////////////////////////////////////////////////////////////

    void addCube (Cube* cube, bool notify);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief removes a cube from database
    ////////////////////////////////////////////////////////////////////////////////

    void removeCube (Cube* cube, bool notify);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief renames a cube
    ////////////////////////////////////////////////////////////////////////////////

    void renameCube (Cube* cube, const string& name, bool notify);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds new Cube to database
    ////////////////////////////////////////////////////////////////////////////////

    Cube* addCube (const string& name, vector<Dimension*>* dimensions, User* user, bool isInfo);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes Cube from database
    ////////////////////////////////////////////////////////////////////////////////

    void deleteCube (Cube* cube, User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @ brief changes name of cube
    ////////////////////////////////////////////////////////////////////////////////

    void renameCube (Cube* cube, const string& name, User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief loads cube by identifier
    ////////////////////////////////////////////////////////////////////////////////

    void loadCube (Cube* cube, User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief saves cube
    ////////////////////////////////////////////////////////////////////////////////

    void saveCube (Cube* cube, User* user);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief unloads a saved cube
    ////////////////////////////////////////////////////////////////////////////////

    void unloadCube (Cube* cube, User* user);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief looks up cube by identifier
    ///
    /// This function is defined here to allow inlining.
    ////////////////////////////////////////////////////////////////////////////////

    Cube * lookupCube (IdentifierType identifier) {
      return identifier < cubes.size() ? cubes[identifier] : 0;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief looks up cube by name
    ///
    /// This function is defined here to allow inlining.
    ////////////////////////////////////////////////////////////////////////////////

    Cube * lookupCubeByName (const string& name) {
      return nameToCube.findKey(name);
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds cube by identifier
    ///
    /// This function is defined here to allow inlining.
    ////////////////////////////////////////////////////////////////////////////////

    Cube * findCube (IdentifierType identifier, User* user, bool requireLoad = true) {      
      checkCubeAccessRight(user, RIGHT_READ);

      Cube* cube = lookupCube(identifier);

      if (cube == 0) {
        throw ParameterException(ErrorException::ERROR_CUBE_NOT_FOUND,
                                 "cube not found",
                                 "cube identifier", (int) identifier);
      }

      if (requireLoad && cube->getStatus() == Cube::UNLOADED) {
        throw ParameterException(ErrorException::ERROR_CUBE_NOT_LOADED,
                                 "cube not loaded",
                                 "cube identifier", (int) identifier);
      }

      return cube;
    }
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds cube by name
    ///
    /// This function is defined here to allow inlining.
    ////////////////////////////////////////////////////////////////////////////////

    Cube * findCubeByName (const string& name, User* user, bool requireLoad = true) {
      checkCubeAccessRight(user, RIGHT_READ);

      Cube* cube = lookupCubeByName(name);
    
      if (cube == 0) {
        throw ParameterException(ErrorException::ERROR_CUBE_NOT_FOUND,
                                 "cube not found",
                                 "name", name);
      }

      if (requireLoad && cube->getStatus() == Cube::UNLOADED) {
        throw ParameterException(ErrorException::ERROR_CUBE_NOT_LOADED,
                                 "cube not loaded",
                                 "name", name);
      }

      return cube;
    }
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @{
    /// @name functions for enterprise rules caches
    ////////////////////////////////////////////////////////////////////////////////

    void setHasCachedRules () {
      hasCachedRules = true;
    }
            
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief clears all rule caches 
    ////////////////////////////////////////////////////////////////////////////////

    void clearRuleCaches ();
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @}
    ////////////////////////////////////////////////////////////////////////////////

  public:
    void calculateMarkers ();
    
  protected:
    uint32_t token;
    IdentifierType identifier;
    string name;
    FileName * fileName;
    DatabaseStatus status;
    Server * server;
    JournalFileWriter * journal;    
    bool deletable;
    bool renamable;
    bool extensible;

  private:
    static FileName computeCubeFileName (const FileName& fileName, IdentifierType identifier);
    
  private:
    void loadDatabaseOverview (FileReader* file, size_t& sizeDimensions, size_t& sizeCubes);

    void loadDatabaseDimension (FileReader* file, size_t sizeDimensions);

    void loadDatabaseDimensions (FileReader* file, size_t sizeDimensions);

    Cube * loadDatabaseCube (FileReader* file, size_t sizeCubes);

    void loadDatabaseCubes (FileReader* file, size_t sizeCubes);

    bool loadDatabaseJournal (FileReader* file);

    void saveDatabaseOverview (FileWriter* file);

    void saveDatabaseDimensions (FileWriter* file);

    void saveDatabaseCubes (FileWriter* file);

    void checkDatabaseAccessRight (User* user, RightsType minimumRight) {
      if (user != 0 && user->getRoleDatabaseRight() < minimumRight) {
        throw ParameterException(ErrorException::ERROR_NOT_AUTHORIZED,
                                 "insufficient access rights for database",
                                 "user", (int) user->getIdentifier());
      }
    }
    
    void checkDimensionAccessRight (User* user, RightsType minimumRight) {
      if (user != 0 && user->getRoleDimensionRight() < minimumRight) {
        throw ParameterException(ErrorException::ERROR_NOT_AUTHORIZED,
                                 "insufficient access rights for dimension",
                                 "user", (int) user->getIdentifier());
      }
    }
    
    void checkCubeAccessRight (User* user, RightsType minimumRight) {
      if (user != 0 && user->getRoleCubeRight() < minimumRight) {
        throw ParameterException(ErrorException::ERROR_NOT_AUTHORIZED,
                                 "insufficient access rights for cube",
                                 "user", (int) user->getIdentifier());
      }
    }
        
    void checkUserInfoAccessRight (User* user, RightsType minimumRight) {
      if (user != 0 && user->getRoleUserInfoRight() < minimumRight) {
        throw ParameterException(ErrorException::ERROR_NOT_AUTHORIZED,
                                 "insufficient access rights for user info object",
                                 "user", (int) user->getIdentifier());
      }
    }
    
    void checkSystemOperationRight (User* user, RightsType minimumRight) {
      if (user != 0 && user->getRoleSysOpRight() < minimumRight) {
        throw ParameterException(ErrorException::ERROR_NOT_AUTHORIZED,
                                 "insufficient access rights for system operation",
                                 "user", (int) user->getIdentifier());
      }
    }
        
    void checkName (const string& name);
    void checkDimensionName (const string& name, bool isInfo);
    void checkCubeName (const string& name, bool isInfo);
        
  private:
    size_t numDimensions; // number of dimensions
    vector<Dimension*> dimensions;
    set<IdentifierType> freeDimensions;
    AssociativeArray<string, Dimension*, Name2DimensionDesc> nameToDimension;

    size_t numCubes; // number of cubes
    vector<Cube*> cubes;
    set<IdentifierType> freeCubes;
    AssociativeArray<string, Cube*, Name2CubeDesc> nameToCube;
    
    // true if the databases has cubes with cached rules
    bool hasCachedRules;
    
    // client cached type
    ConfigurationCube::ClientCacheType cacheType;

	//hide elements
	bool hideElements;
    
  };

}

#endif 
