////////////////////////////////////////////////////////////////////////////////
/// @brief palo area page
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox AG
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef OLAP_AREA_PAGE_H
#define OLAP_AREA_PAGE_H 1

#include "palo.h"

namespace palo {
  class CubeIndex;
  class CubeLooper;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief palo cube page
  /// 
  /// A cube page stores the cell data into a fixed memory size.
  /// Each cube page is divided into rows of a given size. 
  ////////////////////////////////////////////////////////////////////////////////

  class SERVER_CLASS AreaPage {
    friend class CubeLooper;

  public:
    typedef uint8_t * buffer_t;
    typedef uint8_t * element_t;
    typedef uint8_t * key_t;
    typedef uint8_t * value_t;

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates an empty area page 
    ////////////////////////////////////////////////////////////////////////////////

    AreaPage (CubeIndex* index,
              size_t keySize,
              size_t valueSize,
              size_t numElements);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief delete area page
    ////////////////////////////////////////////////////////////////////////////////

    ~AreaPage ();
    
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds an entry to cube
    ////////////////////////////////////////////////////////////////////////////////

    element_t addElement (element_t);
    element_t addDummyElement (element_t);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns a pointer to the beginning
    ////////////////////////////////////////////////////////////////////////////////

    buffer_t begin () {
      return buffer;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns a pointer to the end (first non-used entry)
    ////////////////////////////////////////////////////////////////////////////////

    buffer_t end () {
      return buffer + usedElements * rowSize;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns the used row size
    ////////////////////////////////////////////////////////////////////////////////

    size_t getRowSize () {
      return rowSize;
    }


    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns the row after ptr
    ////////////////////////////////////////////////////////////////////////////////

    buffer_t next (buffer_t ptr) {
      return ptr + rowSize;
    }
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns the a row by position
    ////////////////////////////////////////////////////////////////////////////////

    buffer_t getCell (size_t pos) {
      if (pos < usedElements) {
        return buffer + pos * rowSize;
      }
      return 0;
    }

  private:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief cube index for resize
    ////////////////////////////////////////////////////////////////////////////////

    CubeIndex * index;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief size of the key
    ////////////////////////////////////////////////////////////////////////////////

    size_t keySize;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief size of the value
    ////////////////////////////////////////////////////////////////////////////////

    size_t valueSize;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief size of an entry
    ///
    /// Aligned element size.
    ////////////////////////////////////////////////////////////////////////////////

    size_t rowSize;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief total size of the page
    ////////////////////////////////////////////////////////////////////////////////

    size_t totalSize;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief used number of rows per page 
    ////////////////////////////////////////////////////////////////////////////////

    size_t usedElements;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief number of rows per page 
    ////////////////////////////////////////////////////////////////////////////////

    size_t numberElements;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief pointer to the page memory 
    ////////////////////////////////////////////////////////////////////////////////

    buffer_t buffer;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief temporary buffer for one row
    ////////////////////////////////////////////////////////////////////////////////

    element_t tmpBuffer;
  };

}

#endif
