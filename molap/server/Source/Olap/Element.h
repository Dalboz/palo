////////////////////////////////////////////////////////////////////////////////
/// @brief palo element
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox AG
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef OLAP_ELEMENT_H
#define OLAP_ELEMENT_H 1

#include "palo.h"

#include <string>

namespace palo {
  class Dimension;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief palo element
  ////////////////////////////////////////////////////////////////////////////////

  class SERVER_CLASS Element {
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief Element types
    ////////////////////////////////////////////////////////////////////////////////

    enum ElementType {
      UNDEFINED = 0,
      NUMERIC = 1,
      STRING = 2,
      CONSOLIDATED = 4,
    };  
    
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates new element
    ////////////////////////////////////////////////////////////////////////////////

    Element ()
      : identifier(0), position(0), type(UNDEFINED), level(0), depth(0), numBaseElements(0) {
    }
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates new element with a identifier
    ////////////////////////////////////////////////////////////////////////////////

    Element (IdentifierType identifier)
      : identifier(identifier), position(0), type(UNDEFINED), level(0), depth(0) {
    }

  public:    

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets identifier of element
    ////////////////////////////////////////////////////////////////////////////////

    void setIdentifier (IdentifierType identifier) {
      this->identifier = identifier;
    }      

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets identifier of element
    ////////////////////////////////////////////////////////////////////////////////

    IdentifierType getIdentifier () const {
      return identifier;
    };
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets or rename element
    ////////////////////////////////////////////////////////////////////////////////

    void setName (const string& name) {
      this->name = name;
    };

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets element name
    ////////////////////////////////////////////////////////////////////////////////

    const string& getName () const {
      return name;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets element type
    ////////////////////////////////////////////////////////////////////////////////

    void setElementType (ElementType type) {
      this->type = type;
    };

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets element type
    ////////////////////////////////////////////////////////////////////////////////

    ElementType getElementType () const {
      return (ElementType) type;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets position
    ////////////////////////////////////////////////////////////////////////////////

    void setPosition (PositionType position) {
      this->position = position;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets position
    ////////////////////////////////////////////////////////////////////////////////

    PositionType getPosition () const {
      return position;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets level
    ////////////////////////////////////////////////////////////////////////////////

    void setLevel (LevelType level) {
      this->level = level;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets level
    ////////////////////////////////////////////////////////////////////////////////

    LevelType getLevel (Dimension*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets indent
    ////////////////////////////////////////////////////////////////////////////////

    void setIndent (IndentType indent) {
      this->indent = indent;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets indent
    ////////////////////////////////////////////////////////////////////////////////

    IndentType getIndent (Dimension*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets depth
    ////////////////////////////////////////////////////////////////////////////////

    void setDepth (DepthType depth) {
      this->depth = depth;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets depth
    ////////////////////////////////////////////////////////////////////////////////

    DepthType getDepth (Dimension*);

    void setBaseElements (const map<IdentifierType, double>& baseElements);
    
    void clearBaseElements () {
      baseElements.clear();
    }
    
    const map<IdentifierType, double>* getBaseElements (Dimension* dimension);

    size_t getNumBaseElements (Dimension* dimension);
    
  private:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the identifier of the element
    ////////////////////////////////////////////////////////////////////////////////

    IdentifierType identifier;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the name of the element
    ////////////////////////////////////////////////////////////////////////////////

    string name;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the position of the element in the list of elements
    ////////////////////////////////////////////////////////////////////////////////

    PositionType position;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the type of the element
    ////////////////////////////////////////////////////////////////////////////////

    unsigned type:3;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the level of the element
    ////////////////////////////////////////////////////////////////////////////////

    unsigned level:9;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the depth of the element
    ////////////////////////////////////////////////////////////////////////////////

    unsigned depth:9;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the indent of the element
    ////////////////////////////////////////////////////////////////////////////////

    unsigned indent:9;
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief all base elements
    /// all base elements and their weight
    ////////////////////////////////////////////////////////////////////////////////

    map<IdentifierType, double> baseElements;
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief number (weight != 0.0) of base elements
    ////////////////////////////////////////////////////////////////////////////////

    size_t numBaseElements;
  };

}

#endif


