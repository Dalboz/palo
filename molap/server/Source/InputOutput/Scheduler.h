////////////////////////////////////////////////////////////////////////////////
/// @brief input-output scheduler
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox AG
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef INPUT_OUTPUT_SCHEDULER_H
#define INPUT_OUTPUT_SCHEDULER_H 1

#include "palo.h"

#ifdef USE_POLL
#include <poll.h>
#endif

#include <map>
#include <deque>
#include <queue>
#include <set>

#include "Collections/Vector.h"

namespace palo {
  using namespace std;

  class HandleTask;
  class IoTask;
  class ListenTask;
  class Lock;
  class SemaphoreTask;
  class SignalTask;
  class Task;
  class Worker;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief input-output scheduler
  ////////////////////////////////////////////////////////////////////////////////

  class SERVER_CLASS Scheduler {
  public:
    static const int START_WORKER_DELAY_MSEC = 500;
    static const int KILL_WORKER_DELAY_MSEC = 2000;
    static const int DEFAULT_TIMEOUT_MSEC = 100;
    static const int GRACE_SECONDS = 3;
    static const int LOCK_CHECK_PERIODE_SECONDS = 60;
    static Scheduler * globalScheduler;

    typedef pair<int64_t, Worker*> prioTask;
    
    template<class T> 
    struct less {
      bool operator() (const prioTask& p1, const prioTask& p2) const {
         return p1.first > p2.first;
      } 
    };
    
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes a scheduler
    ////////////////////////////////////////////////////////////////////////////////

    ~Scheduler ();

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief get the scheduler
    ////////////////////////////////////////////////////////////////////////////////

    static Scheduler* getScheduler ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates a new semaphore
    ////////////////////////////////////////////////////////////////////////////////

    semaphore_t createSemaphore ();
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes a new semaphore
    ////////////////////////////////////////////////////////////////////////////////

    void deleteSemaphore (semaphore_t);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief raises semaphore for all waiting tasks
    ////////////////////////////////////////////////////////////////////////////////

    void raiseAllSemaphore (semaphore_t, const string*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief raises semaphore for first waiting task
    ////////////////////////////////////////////////////////////////////////////////

    void raiseOnceSemaphore (semaphore_t);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief waits for signal on semaphore
    ////////////////////////////////////////////////////////////////////////////////

    void waitOnSemaphore (semaphore_t, SemaphoreTask *, IdentifierType);

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief registers a new worker
    ////////////////////////////////////////////////////////////////////////////////

    void registerWorker (Worker * worker);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief unregisters a new worker
    ////////////////////////////////////////////////////////////////////////////////

    void unregisterWorker (Worker * worker);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief registers a worker for killing after a timeout 
    ////////////////////////////////////////////////////////////////////////////////

    void registerTimoutWorker (Worker * worker);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds a new listen task
    ////////////////////////////////////////////////////////////////////////////////

    bool addListenTask (ListenTask*, int port);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds a new listen task
    ////////////////////////////////////////////////////////////////////////////////

    bool addListenTask (ListenTask*, const string& address, int port);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief removes a listen task
    ////////////////////////////////////////////////////////////////////////////////

    void removeListenTask (ListenTask*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds a new read/write task
    ////////////////////////////////////////////////////////////////////////////////

    bool addIoTask (IoTask*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief removes a read/write task
    ////////////////////////////////////////////////////////////////////////////////

    void removeIoTask (IoTask*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds a new handle task
    ////////////////////////////////////////////////////////////////////////////////

    bool addHandleTask (HandleTask*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief removes a handle task
    ////////////////////////////////////////////////////////////////////////////////

    void removeHandleTask (HandleTask*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief adds a new signal task
    ////////////////////////////////////////////////////////////////////////////////

    bool addSignalTask (SignalTask*, signal_t);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief removes a signal task
    ////////////////////////////////////////////////////////////////////////////////

    socket_t removeSignalTask (SignalTask*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief starts scheduler, keeps running
    ////////////////////////////////////////////////////////////////////////////////

    void run ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief starts shutdown sequence
    ////////////////////////////////////////////////////////////////////////////////

    void beginShutdown ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief starts shutdown sequence
    ////////////////////////////////////////////////////////////////////////////////

    bool shutdownInProgress () {
      return stopping;
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief called to raise a signal
    ////////////////////////////////////////////////////////////////////////////////

    void raiseSignal (signal_t);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief called to add a lock to the timeout queue
    ////////////////////////////////////////////////////////////////////////////////

    void addLock (Lock* lock) {
      locks.insert(lock);
    }

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief called to remove a lock from to the timeout queue
    ////////////////////////////////////////////////////////////////////////////////

    void removeLock (Lock* lock) {
      locks.erase(lock);
    }

  private:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief standard constructor
    ////////////////////////////////////////////////////////////////////////////////

    Scheduler ();

  private:
    Scheduler (const Scheduler&);
    Scheduler& operator= (const Scheduler&);

  private:
    void initializeSignalHandlers ();
    void notifySignalHandlers ();
    bool setupSockets (socket_t*);
    void notifyHandlers (int n);
    void shutdownListenTasks ();
    void shutdownIoTasks ();
    void addTask (Task*);
    void removeTask (Task*);
    void removeSemaphoreTask (SemaphoreTask*);
    void removeSemaphoreTask (semaphore_t, SemaphoreTask*);
    void notifyHandleHandlers ();
    void startWorkers ();
    void startTimeoutWorkers ();
    void removePendingTasks ();
    void collectWorkerExitStatus ();
    void checkLocks ();

  private:
    bool stopping;
    bool listenerOpen;
    bool readWriteOpen;
    time_t stopTime;

    set<Task*> tasks;

    map< signal_t, set<SignalTask*> > signalHandlers;
    set<signal_t> raisedSignals;

    map<socket_t, IoTask*> sockets;

    set<IoTask*> listenTasks;
    set<IoTask*> removableListenTasks;
    set<IoTask*> readWriteTasks;
    set<IoTask*> removableIoTasks;

    set<HandleTask*> handleTasks;
    set<HandleTask*> removableHandleTasks;

#ifdef USE_POLL
    Vector<pollfd> pollFds;
#else
    Vector<socket_t> selectFds;

    fd_set readFds;
    fd_set writeFds;
    fd_set exceptFds;
#endif

    int64_t lastWorkerStart;
    deque<Worker*> workerList;
    
    int32_t nextCollectTime; 
    
    priority_queue< prioTask, vector<prioTask>,  less<prioTask> > timeoutWorkers;
    set<Worker*> removedWorker;

    map< semaphore_t, vector< pair<SemaphoreTask*,IdentifierType> > > semaphore2Tasks;
    map< SemaphoreTask*, set<semaphore_t> > task2Semaphores;    
    
    set<Lock*> locks;
  };

}

#endif
