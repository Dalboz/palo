////////////////////////////////////////////////////////////////////////////////
/// @brief connector to libpalo 1.0
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox GmbH
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef UNIT_TESTS_TIMING_PALO_CONNECTOR_H
#define UNIT_TESTS_TIMING_PALO_CONNECTOR_H 1

#include <string>
#include <vector>

extern "C" {
#include "libpalo.h"
}

namespace palo {
  using namespace std;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief connector to libpalo 1.0
  ////////////////////////////////////////////////////////////////////////////////

  class PaloConnector {
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates new connection to palo
    ////////////////////////////////////////////////////////////////////////////////

    PaloConnector (const string& serverName, const string& serverPort, const string& userName, const string& password);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief disconnects connection to palo
    ////////////////////////////////////////////////////////////////////////////////

    ~PaloConnector ();

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates a database with given name
    ////////////////////////////////////////////////////////////////////////////////

    void createDatabase (const string& database);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief tries to delete a database with given name
    ////////////////////////////////////////////////////////////////////////////////

    void deleteDatabase (const string& database);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates dimension in database
    ////////////////////////////////////////////////////////////////////////////////

    void createDimension (const string& database, const string& dimension);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void addElement (const string& database, 
                     const string& dimension, 
                     const string& element, 
                     de_type type, 
                     unsigned int num_consolidation_elements, 
                     const struct arg_consolidation_element_info_a *consolidation_elements);
                     
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void appendElement (const string& database,
                        const string& dimension,
                        const string& element,
                        de_type type,
                        unsigned int num_consolidation_elements,
                        const struct arg_consolidation_element_info_a *consolidation_elements);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates numeric element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void addNumericElement (const string& database, 
                            const string& dimension, 
                            const string& element);
                             
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates consolidated element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void addConsolidateElement (const string& database, 
                                const string& dimension, 
                                const string& element, 
                                vector<string> &subElements,
                                de_type type);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates consolidated element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void appendConsolidateElement (const string& database,
                                   const string& dimension,
                                   const string& element,
                                   vector<string> &subElements,
                                   de_type type);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief deletes element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void deleteElement (const string& database, 
                        const string& dimension,
                        const string& element);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief renames element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    void renameElement (const string& database, 
                        const string& dimension,
                        const string& element,
                        const string& newName);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief appends children
    ////////////////////////////////////////////////////////////////////////////////

    void appendChildren (const string& database, 
                         const string& dimension,
                         const string& element,
                         vector<string> &subElements,
                         de_type type);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief creates cube in database
    ////////////////////////////////////////////////////////////////////////////////

    void createCube (const string& database, const string& cube, vector<string> &dimensions);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets data
    ////////////////////////////////////////////////////////////////////////////////

    void setData (const string& database, 
                  const string& cube, 
                  vector<string>coordinates, 
                  double dbl_val);
                   
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets data using getdata
    ////////////////////////////////////////////////////////////////////////////////

    double getData (const string& database, 
                    const string& cube, 
                    const vector<string>& coordinates);
                     
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets data using getdata_multi
    ////////////////////////////////////////////////////////////////////////////////

    double getDataMulti (const string& database, 
                         const string& cube, 
                         const vector< vector<string> >& coordinates);
                        
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets data using getdata_area
    ////////////////////////////////////////////////////////////////////////////////

    double getArea (const string& database, 
                    const string& cube, 
                    const vector< vector<string> >& coordinates);
                     
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief shuts down the server
    ////////////////////////////////////////////////////////////////////////////////

    void serverShutdown ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets cube dimensions
    ////////////////////////////////////////////////////////////////////////////////

    vector<string> getCubeDimensions (const string& database, const string& cube); 
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets numerics element in dimension
    ////////////////////////////////////////////////////////////////////////////////

    vector<string> getNumericElements (const string& database, const string& dimension); 
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief gets consolidated elements in dimension
    ////////////////////////////////////////////////////////////////////////////////

    vector<string> getConsolidatedElements (const string& database, const string& dimension); 

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eindent
    ////////////////////////////////////////////////////////////////////////////////

    unsigned int eindent (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls elevel
    ////////////////////////////////////////////////////////////////////////////////

    unsigned int elevel (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eindex
    ////////////////////////////////////////////////////////////////////////////////

    unsigned int eindex (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eweight
    ////////////////////////////////////////////////////////////////////////////////

    double eweight (const string& database, const string& dimension, const string& e1, const string& e2);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls ename
    ////////////////////////////////////////////////////////////////////////////////

    string ename (const string& database, const string& dimension, unsigned int offset);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls enext
    ////////////////////////////////////////////////////////////////////////////////

    string enext (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eprev
    ////////////////////////////////////////////////////////////////////////////////

    string eprev (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls echildcount
    ////////////////////////////////////////////////////////////////////////////////

    int echildcount (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eparentcount
    ////////////////////////////////////////////////////////////////////////////////
      
    int eparentcount (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls esibling
    ////////////////////////////////////////////////////////////////////////////////

    string esibling (const string& database, const string& dimension, const string& element, int offset);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls echildname
    ////////////////////////////////////////////////////////////////////////////////

    string echildname (const string& database, const string& dimension, const string& element, int offset);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eparentname
    ////////////////////////////////////////////////////////////////////////////////

    string eparentname (const string& database, const string& dimension, const string& element, int offset);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls eischild
    ////////////////////////////////////////////////////////////////////////////////

    int eischild (const string& database, const string& dimension, const string& e1, const string& e2);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls efirst
    ////////////////////////////////////////////////////////////////////////////////

    string efirst (const string& database, const string& dimension);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls emove
    ////////////////////////////////////////////////////////////////////////////////

    void emove (const string& database, const string& dimension, const string& element, int pos);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls ecount
    ////////////////////////////////////////////////////////////////////////////////

    int ecount (const string& database, const string& dimension);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls etype
    ////////////////////////////////////////////////////////////////////////////////

   int etype (const string& database, const string& dimension, const string& element);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls etoplevel
    ////////////////////////////////////////////////////////////////////////////////

    int etoplevel (const string& database, const string& dimension);
  
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief calls edimension
    ////////////////////////////////////////////////////////////////////////////////

    string edimension (const string& database, const vector<string>& elements, bool);
  
  private:
    void handleError (const string&, libpalo_err *err);
    void printError (libpalo_err *err);
    void init ();
    void connect ();
    void cleanup ();

  private:  
    string serverName;
    string serverPort;
    string userName;
    string password;

    bool   connected;
    bool   initialized;          

    struct sock_obj so;             
  };

}

#endif
