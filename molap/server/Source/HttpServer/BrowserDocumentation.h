////////////////////////////////////////////////////////////////////////////////
/// @brief provides data documentation
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox AG
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef HTTP_SERVER_BROWSER_DOCUMENTATION_H
#define HTTP_SERVER_BROWSER_DOCUMENTATION_H 1

#include "palo.h"

#include <string>
#include <map>
#include <vector>

#include "InputOutput/Documentation.h"
#include "Olap/Server.h"
#include "Olap/Database.h"

namespace palo {
  using namespace std;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief provides data documentation
  ////////////////////////////////////////////////////////////////////////////////

  class SERVER_CLASS BrowserDocumentation : public Documentation {
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a data based documentation
    ////////////////////////////////////////////////////////////////////////////////

    BrowserDocumentation (const string& message);

  public:
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns true if a documentation entry was found
    ////////////////////////////////////////////////////////////////////////////////

    bool hasDocumentationEntry (const string&);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns a vector of values to a key word
    ////////////////////////////////////////////////////////////////////////////////

    const vector<string>& getDocumentationEntries (const string&);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief returns one value to a keyword 
    ////////////////////////////////////////////////////////////////////////////////

    const string& getDocumentationEntry (const string& name, size_t index = 0);

  protected:

     ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts identifier list to string
    ////////////////////////////////////////////////////////////////////////////////

    static string convertToString (const IdentifiersType*);

     ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts element type to string
    ////////////////////////////////////////////////////////////////////////////////

    static string convertElementTypeToString (Element::ElementType);

     ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts status to string
    ////////////////////////////////////////////////////////////////////////////////

    static string convertStatusToString (Database*);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts status to string
    ////////////////////////////////////////////////////////////////////////////////

    static string convertStatusToString (Cube*);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts item type to string
    ////////////////////////////////////////////////////////////////////////////////

    static string convertTypeToString (ItemType type);
    static string convertTypeToString (Dimension* dimension);
    static string convertTypeToString (Cube* cube);

  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines database values
    ////////////////////////////////////////////////////////////////////////////////

    void defineDatabase (Database* database);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines database values
    ////////////////////////////////////////////////////////////////////////////////

    void defineDatabases (const vector<Database*> * databases);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines dimension values
    ////////////////////////////////////////////////////////////////////////////////

    void defineDimension (Dimension* dimension);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines dimension values
    ////////////////////////////////////////////////////////////////////////////////

    void defineDimensions (const vector<Dimension*> * dimensions);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines cube values
    ////////////////////////////////////////////////////////////////////////////////

    void defineCube (Cube* cube);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines cube values
    ////////////////////////////////////////////////////////////////////////////////

    void defineCubes (const vector<Cube*> * cubes);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines element values
    ////////////////////////////////////////////////////////////////////////////////

    void defineElement (Dimension*, Element* element, const string& prefix);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief defines element values
    ////////////////////////////////////////////////////////////////////////////////

    void defineElements (Dimension*, const vector<Element*> * elements, const string& prefix);

  protected:
    map<string, vector<string> > values;
  };

}



#endif 
