////////////////////////////////////////////////////////////////////////////////
/// @brief http handler for palo objects
///
/// @file
///
/// Copyright (C) 2006-2008 Jedox AG
///
/// This program is free software; you can redistribute it and/or modify it
/// under the terms of the GNU General Public License (Version 2) as published
/// by the Free Software Foundation at http://www.gnu.org/copyleft/gpl.html.
///
/// This program is distributed in the hope that it will be useful, but WITHOUT
/// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
/// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
/// more details.
///
/// You should have received a copy of the GNU General Public License along with
/// this program; if not, write to the Free Software Foundation, Inc., 59 Temple
/// Place, Suite 330, Boston, MA 02111-1307 USA
/// 
/// You may obtain a copy of the License at
///
/// <a href="http://www.jedox.com/license_palo.txt">
///   http://www.jedox.com/license_palo.txt
/// </a>
///
/// If you are developing and distributing open source applications under the
/// GPL License, then you are free to use Palo under the GPL License.  For OEMs,
/// ISVs, and VARs who distribute Palo with their products, and do not license
/// and distribute their source code under the GPL, Jedox provides a flexible
/// OEM Commercial License.
///
/// Developed by triagens GmbH, Koeln on behalf of Jedox AG. Intellectual
/// property rights has triagens GmbH, Koeln. Exclusive worldwide
/// exploitation right (commercial copyright) has Jedox AG, Freiburg.
///
/// @author Frank Celler, triagens GmbH, Cologne, Germany
/// @author Achim Brandt, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef HTTP_SERVER_PALO_HTTP_HANDLER_H
#define HTTP_SERVER_PALO_HTTP_HANDLER_H 1

#include "palo.h"

#include <string>

#include "Collections/StringUtils.h"

#include "InputOutput/HttpFileRequestHandler.h"
#include "InputOutput/HttpResponse.h"
#include "InputOutput/HttpServer.h"
#include "InputOutput/ListenTask.h"
#include "InputOutput/Scheduler.h"
#include "InputOutput/Task.h"

#include "Olap/Server.h"
#include "Olap/User.h"
#include "Olap/Lock.h"

namespace palo {
  using namespace std;

  class PaloSession;
  class Rule;

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief possible encryption types
  ////////////////////////////////////////////////////////////////////////////////

  enum Encryption_e {ENC_NONE = 0, ENC_OPTIONAL = 1, ENC_REQUIRED = 2};

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief static constructor for http server
  ////////////////////////////////////////////////////////////////////////////////

  SERVER_FUNC HttpServer * ConstructPaloHttpServer (Scheduler * scheduler,
                                                      Server * server,
                                                      const string& templateDirectory,
                                                      const string& address,
                                                      int port,
                                                      bool admin,
                                                      bool requireUserLogin,
                                                      Encryption_e encryption,
                                                      int https);

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief add all handlers
  ////////////////////////////////////////////////////////////////////////////////
    
  SERVER_FUNC void AddPaloHttpHandlers (Server* server,
                                          HttpServer* httpServer,
                                          Scheduler* scheduler,
                                          const string& templateDirectory,
                                          bool admin,
                                          Encryption_e encryption,
                                          int https,
                                          bool enabled);

  ////////////////////////////////////////////////////////////////////////////////
  /// @brief http handler for palo objects
  ////////////////////////////////////////////////////////////////////////////////

  class SERVER_CLASS PaloHttpHandler : public HttpRequestHandler {
  public:
    static const string ACTIVATE;
    static const string ADD;
    static const string BASE_ONLY;
    static const string BLOCKSIZE;
    static const string COMMENT;
    static const string COMPLETE;
    static const string CONDITION;
    static const string DEFINITION;
    static const string EXTERN_PASSWORD;
    static const string EXTERNAL_IDENTIFIER;
    static const string FUNCTIONS;
    static const string EVENT;
    static const string EVENT_PROCESSOR;
    static const string ID_AREA;
    static const string ID_CHILDREN;
    static const string ID_CUBE;   
    static const string ID_DATABASE;      
    static const string ID_DIMENSION;   
    static const string ID_DIMENSIONS;   
    static const string ID_ELEMENT;
    static const string ID_ELEMENTS;
    static const string ID_LOCK;
	static const string ID_MODE;
    static const string ID_PATH;
    static const string ID_PATHS;
    static const string ID_PATH_TO;
    static const string ID_RULE;
    static const string ID_TYPE;
    static const string NAME_AREA;
    static const string NAME_CHILDREN;
    static const string NAME_CUBE;
    static const string NAME_DATABASE;
    static const string NAME_DIMENSION;
    static const string NAME_DIMENSIONS;
    static const string NAME_ELEMENT;
    static const string NAME_ELEMENTS;
    static const string NAME_PATH;
    static const string NAME_PATHS;
    static const string NAME_PATH_TO;
    static const string NAME_USER;
    static const string NEW_NAME;
    static const string NUM_STEPS;
    static const string PASSWORD;
    static const string POSITION;
    static const string SESSION;
    static const string SHOW_ATTRIBUTE;
    static const string SHOW_NORMAL;
    static const string SHOW_RULES;
    static const string SHOW_RULE;
    static const string SHOW_SYSTEM;
    static const string SHOW_INFO;
    static const string SKIP_EMPTY;
    static const string SOURCE;
    static const string SPLASH;
    static const string USE_IDENTIFIER;
    static const string USE_RULES;
    static const string VALUE;
    static const string VALUES;
    static const string WEIGHTS;
	static const string SHOW_LOCK_INFO;

    static time_t defaultTtl;

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief define standard http handlers
    ////////////////////////////////////////////////////////////////////////////////

    static void defineStandardHandlers (Server *,
                                        HttpServer *,
                                        Scheduler *,
                                        const string&,
                                        Encryption_e,
                                        int);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief define standard disabled http handlers
    ////////////////////////////////////////////////////////////////////////////////

    static void defineDisabledHandlers (Server *,
                                        HttpServer *,
                                        Encryption_e,
                                        int);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief define browser http handlers
    ////////////////////////////////////////////////////////////////////////////////

    static void defineBrowserHandlers (Server *, HttpServer *, const string&, Scheduler *);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief define documentation http handlers
    ////////////////////////////////////////////////////////////////////////////////

    static void defineDocumentationHandlers (Server*, const string& path, const string& tmpl, HttpServer *);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief define statistics http handler
    ////////////////////////////////////////////////////////////////////////////////

    static void defineStatisticsHandlers (Server*, HttpServer *, const string&);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief sets the require user flag
    ////////////////////////////////////////////////////////////////////////////////

    static void setRequireUser (bool require);
            
  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a new handler
    ////////////////////////////////////////////////////////////////////////////////

    PaloHttpHandler (Server * server) 
      : server(server) {
      user = 0;
      session = 0;
    }

  public:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks login and calls method handlePaloRequest in subclass 
    ////////////////////////////////////////////////////////////////////////////////

    HttpResponse * handleHttpRequest (const HttpRequest *);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks for semaphore handler and calls handlePaloSemaphoreRaised
    ////////////////////////////////////////////////////////////////////////////////

    HttpResponse * handleSemaphoreRaised (semaphore_t, const HttpRequest *, IdentifierType clientData, const string* msg);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks for semaphore handler and calls handlePaloSemaphoreDeleted
    ////////////////////////////////////////////////////////////////////////////////

    HttpResponse * handleSemaphoreDeleted (semaphore_t, const HttpRequest *, IdentifierType clientData);

  protected:
    static const string X_PALO_SERVER;
    static const string X_PALO_DATABASE;
    static const string X_PALO_DIMENSION;
    static const string X_PALO_CUBE;
    static const string X_PALO_CUBE_CLIENT_CACHE;

    static bool requireUser;

  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief default time to live
    ////////////////////////////////////////////////////////////////////////////////

    static time_t getDefaultTtl () {
      return defaultTtl;
    }

  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs an element respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateElementResponse (Dimension*, Element*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a list of elements respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateElementsResponse (Dimension*, vector<Element*>*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a dimension respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateDimensionResponse (Dimension*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a list of dimensions respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateDimensionsResponse (Database*, vector<Dimension*>*, bool , bool, bool, bool);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a cube respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateCubeResponse (Cube*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a list of cubes respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateCubesResponse (Database*, vector<Cube*>*, bool , bool, bool, bool);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a database respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateDatabaseResponse (Database*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a list of databases respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateDatabasesResponse (Server*, vector<Database*>*, bool , bool);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a cube respsonse
    ////////////////////////////////////////////////////////////////////////////////

      static HttpResponse * generateRuleResponse (Rule* rule,
                                                  bool useIdentifier);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a rule respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateRulesResponse (Cube* cube, 
                                                 const vector<Rule*>* rule,
                                                 bool useIdentifier);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a lock respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateLockResponse (Server* server, Cube*, Lock*, bool completeContainsArea = false);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a lock respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateLocksResponse (Server* server, Cube*, User* user, bool completeContainsArea = false);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs an OK response
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateOkResponse ();

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs an OK response with server token
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateOkResponse (Server*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs an OK response with database token
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateOkResponse (Database*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs an OK response with cube token
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateOkResponse (Cube*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs an OK response with dimension token
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateOkResponse (Dimension*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a not implement error response
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateNotImplementedResponse ();
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a cell respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateCellResponse (Cube*, Cube::CellValueType*,
                                                bool found,
                                                bool showRule,
												bool showLockInfo,
												Cube::CellLockInfo lockInfo);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs a list of cell respsonse
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateCellsResponse (Cube*,
                                                 vector<Cube::CellValueType> *,
                                                 vector<bool> *,
                                                 vector<int> *,
                                                 bool showRule,
												 bool showLockInfo,
												 vector<Cube::CellLockInfo> * lockInfo);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief constructs session identifier and time to live response
    ////////////////////////////////////////////////////////////////////////////////

    static HttpResponse * generateLoginResponse (Server *, PaloSession *);


  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks server token in request
    ////////////////////////////////////////////////////////////////////////////////

    static void checkToken (Server*, const HttpRequest*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks database token in request
    ////////////////////////////////////////////////////////////////////////////////

    static void checkToken (Database*, const HttpRequest*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks dimension token in request
    ////////////////////////////////////////////////////////////////////////////////

    static void checkToken (Dimension*, const HttpRequest*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks cube token in request
    ////////////////////////////////////////////////////////////////////////////////

    static void checkToken (Cube*, const HttpRequest*);

  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief appends csv string
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCsvString (StringBuffer *sb, const string& text);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief appends csv integer
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCsvInteger (StringBuffer *sb, int32_t i);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief appends csv integer
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCsvInteger (StringBuffer *sb, uint32_t i);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief appends csv integer
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCsvInteger (StringBuffer *sb, uint64_t i);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief appends csv double
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCsvDouble (StringBuffer *sb, double d);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts string to element type
    ////////////////////////////////////////////////////////////////////////////////

    static Element::ElementType getElementTypeByString (const string& name);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief converts type string to element type
    ////////////////////////////////////////////////////////////////////////////////

    static Element::ElementType getElementTypeByIdentifier (const string& name);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts splash mode
    ////////////////////////////////////////////////////////////////////////////////

    static Cube::SplashMode getSplashMode (const HttpRequest* request);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts paths from string
    ////////////////////////////////////////////////////////////////////////////////

    static IdentifiersType getPath (const string& pathString, const vector<Dimension*> * dimensions, bool usePathIds);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts paths from request
    ////////////////////////////////////////////////////////////////////////////////

    static IdentifiersType getPath (const HttpRequest* request, const vector<Dimension*> * dimensions);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts path from request
    ////////////////////////////////////////////////////////////////////////////////

    static IdentifiersType getPathTo (const HttpRequest* request, const vector<Dimension*> * dimensions);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts area from string
    ////////////////////////////////////////////////////////////////////////////////

    static vector<IdentifiersType> getArea (const string& pathString,
                                            const vector<Dimension*> * dimensions,
                                            uint32_t& numResult,
                                            bool usePathIds,
                                            bool useBaseOnly);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts area from request
    ////////////////////////////////////////////////////////////////////////////////

    static vector<IdentifiersType> getArea (const HttpRequest* request,
                                            const vector<Dimension*> * dimensions,
                                            uint32_t& numResult,
                                            bool useBaseOnly);

  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief virtual method to handle a request
    ////////////////////////////////////////////////////////////////////////////////

    virtual HttpResponse * handlePaloRequest (const HttpRequest * request) = 0;
  
  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds responding database
    ////////////////////////////////////////////////////////////////////////////////

    Database  * findDatabase  (const HttpRequest * request, User* user, bool requireLoad = true);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds responding dimension
    ////////////////////////////////////////////////////////////////////////////////

    Dimension * findDimension (Database* database, const HttpRequest * request, User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds responding cube
    ////////////////////////////////////////////////////////////////////////////////

    Cube * findCube (Database* database, const HttpRequest * request, User* user, bool requireLoad = true);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds responding element
    ////////////////////////////////////////////////////////////////////////////////

    Element * findElement   (Dimension* dimension, const HttpRequest * request, User* user);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds responding rule
    ////////////////////////////////////////////////////////////////////////////////

    Rule * findRule (Cube*, const HttpRequest * request, User* user);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds session
    ////////////////////////////////////////////////////////////////////////////////

    PaloSession * findSession (const string& value);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief finds session
    ////////////////////////////////////////////////////////////////////////////////

    PaloSession * findSession (const HttpRequest * request);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief extracts a boolean
    ////////////////////////////////////////////////////////////////////////////////

    bool getBoolean (const HttpRequest * request, const string& param, bool defaultValue);

  protected:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief checks authentication
    ////////////////////////////////////////////////////////////////////////////////

    virtual void checkLogin (const HttpRequest * request);
    
  protected:    

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief pointer to the OLAP server
    ////////////////////////////////////////////////////////////////////////////////

    Server * server;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the user of the connection
    ////////////////////////////////////////////////////////////////////////////////

    User * user;
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief the current session of the connection
    ////////////////////////////////////////////////////////////////////////////////

    PaloSession * session;
    
  private:

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append element data to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendElement (StringBuffer*, Dimension*, Element*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append cube data to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCube (StringBuffer*, Cube*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append rule data to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendRule (StringBuffer*, Rule*, bool useIdentifier);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append dimension data to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendDimension (StringBuffer*, Dimension*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append database data to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendDatabase (StringBuffer*, Database*);

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append cell type and value to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendCell (StringBuffer*, Cube::CellValueType*, bool found, bool showRule, bool showLockInfo = false, Cube::CellLockInfo lockInfo = 0);

	////////////////////////////////////////////////////////////////////////////////
    /// @brief append area string to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendArea (StringBuffer*, const vector< set<IdentifierType> > &area);
	static void appendArea (StringBuffer*, const vector< IdentifiersType > &area);
    
    ////////////////////////////////////////////////////////////////////////////////
    /// @brief append lock data to the response
    ////////////////////////////////////////////////////////////////////////////////

    static void appendLock (Server* server, StringBuffer*, Lock*, bool completeContainsArea = false);
  };

}

#endif
